class ListNode:
    def __init__(self, key, val):
        self.pair = (key, val)
        self.next = None


class MyHashMap:
    def __init__(self):
        self.length = 20
        self.map = [None] * self.length

    def put(self, key: int, value: int) -> None:
        index = key % self.length
        if self.map[index]:
            current = self.map[index]
            while current.next:
                current = current.next
            current.next = ListNode(key, value)
        else:
            self.map[index] = ListNode(key, value)

    def get(self, key: int) -> int:
        index = key % self.length
        current = self.map[index]
        while current:
            if current.pair[0] == key:
                return current.pair[1]
            current = current.next
        return -1

    def remove(self, key: int) -> None:
        index = key % self.length
        current = self.map[index]
        if not current:
            return
        if current.pair[0] == key:
            self.map[index] = current.next
        else:
            while current.next:
                if current.next.pair[0] == key:
                    current.next = current.next.next
                    return
                current = current.next
